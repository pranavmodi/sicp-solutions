#lang scheme

(define (div-interval x y)
  (mul-interval x
                (make-interval (/ 1.0 (upper-bound y))
                               (/ 1.0 (lower-bound y)))))
(define (make-interval x y)
  (cons x y))


(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
        (make-interval (min p1 p2 p3 p4)
               (max p1 p2 p3 p4))))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))


(define (make-center-percent c p)
  (make-interval (- c (* (/ p 100) c)) (+ c (* (/ p 100) c))))

(define (center a)
  (/ (+ (upper-bound a) (lower-bound a)) 2))

(define (width a)
  (/ (- (upper-bound a) (lower-bound a)) 2))

(define (percent a)
  (* (/ (width a) (center a)) 100))

(define (lower-bound a)
  (car a))

(define (upper-bound a)
  (cdr a))




(define (par1 r1 r2)
  (div-interval (mul-interval r1 r2)
                (add-interval r1 r2)))
(define (par2 r1 r2)
  (let ((one (make-interval 1 1)))
    (div-interval one
                  (add-interval (div-interval one r1)
                                (div-interval one r2)))))


(define a (make-center-percent 4 5))
(define b (make-center-percent 5 4))
(define c (div-interval a a))
(define d (div-interval b b))
(define e (div-interval a b))
(define f (mul-interval a b))
(define m (par1 a b))
(define n (par2 a b))

