#lang scheme

(define nil '())


(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))



(define (adjoin-set x set)
  (cond ((null? set) (make-tree x (quote ()) (quote ())))
        ((= x (entry set)) set)
        ((< x (entry set))
         (make-tree (entry set)
                    (adjoin-set x (left-branch set))
                    (right-branch set)))
        ((> x (entry set))
         (make-tree (entry set)
                    (left-branch set)
                    (adjoin-set x (right-branch set))))))



(define (list->tree elements)
  (car (partial-tree elements (length elements))))
(define (partial-tree elts n)
  (if (= n 0)
      (cons (quote ()) elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))


(define (lookup given-key set-of-records)
  (cond ((null? set-of-records) #f)
         ((= (entry set-of-records) given-key) (car set-of-records))
         (else (cond ((> (entry set-of-records) given-key) (lookup given-key (left-branch set-of-records)))
                     ((< (entry set-of-records) given-key) (lookup given-key (right-branch set-of-records)))))))


(define t (list->tree (list 0 1 2 5 6)))

(lookup 7 t)