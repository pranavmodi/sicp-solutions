#lang scheme

(define (make-leaf symbol weight)
  (list (quote leaf) symbol weight))
(define (leaf? object)
  (eq? (car object) (quote leaf)))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))


(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))

(define (left-branch tree) (car tree))


(define (right-branch tree) (cadr tree))
(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))
(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))


(define (decode bits tree)
  (define (decode-1 bits current-branch)
    (if (null? bits)
        (quote ())
        (let ((next-branch
               (choose-branch (car bits) current-branch)))
          (if (leaf? next-branch)
              (cons (symbol-leaf next-branch)
                    (decode-1 (cdr bits) tree))
              (decode-1 (cdr bits) next-branch)))))
  (decode-1 bits tree))
(define (choose-branch bit branch)
  (cond ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error "bad bit -- CHOOSE-BRANCH" bit))))

(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set))) (cons x set))
        (else (cons (car set)
                    (adjoin-set x (cdr set))))))


(define (make-leaf-set pairs)
  (if (null? pairs)
      (quote ())
      (let ((pair (car pairs)))
                                             ; symbol
        (adjoin-set (make-leaf (car pair)
                               (cadr pair)) ; frequency
                    (make-leaf-set (cdr pairs))))))


(define sample-tree
  (make-code-tree (make-leaf (quote A) 4)
                  (make-code-tree
                   (make-leaf (quote B) 2)
                   (make-code-tree (make-leaf (quote D) 1)
                                   (make-leaf (quote C) 1)))))


(define (encode-symbol symbol tree)
  (define (es1 code tr)
    (cond ((leaf? tr) code)
          ((elements-of-set? symbol (right-branch tr)) (append code (list symbol (es1 code (right-branch tr)))))
          ((elements-of-set? symbol (left-branch tr)) (append code (list symbol (es1 code (left-branch tr)))))
          (else (error "bad symbol -- CHOOSE-BRANCH" bit))))
  (es1 (quote ()) tree))
  




(define sample-message (quote (0 1 1 0 0 1 0 1 0 1 1 1 0)))

(decode sample-message sample-tree)

