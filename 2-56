#lang scheme

(define nil '())

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
((sum? exp)
 (make-sum (deriv (addend exp) var)
           (deriv (augend exp) var)))
((product? exp)
 (make-sum
   (make-product (multiplier exp)
                 (deriv (multiplicand exp) var))
   (make-product (deriv (multiplier exp) var)
                 (multiplicand exp))))
((exponentiation? exp)
 (make-product (exponent exp) (make-exponentiation (base exp) (- (exponent exp) 1))))
(else
 (error "unknown expression type -- DERIV" exp))))


(define (variable? x) (symbol? x))

(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (make-sum a1 a2) (list (quote +) a1 a2))

(define (make-product m1 m2) (append (list (quote *) m1) m2))


(define (sum? x)
    (and (pair? x) (eq? (car x) (quote +))))


(define (addend s) (cadr s))

 (define (augend s) 
   (cond ((< (length s) 4) (car (cdr (cdr s))))
         (else (append (list (quote +)) (cdr (cdr s))))))
  

  (define (product? x)
    (and (pair? x) (eq? (car x) (quote *))))
  
  (define (multiplier p) (cadr p))
  
  (define (multiplicand p) 
     (cond ((< (length p) 4) (car (cdr (cdr p))))
         (else (append (list (quote +)) (cdr (cdr p))))))
  
(define (exponentiation? exp)
  (and (pair? exp) (eq? (car exp) (quote **))))

(define (base exp)
  (cadr exp))

(define (exponent exp)
  (caddr exp))

(define (=number? exp num)
  (and (number? exp) (= exp num)))


(define (make-exponentiation b e)
  (cond ((and (number? e) (= e 0)) 1)
        ((and (number? e) (= e 1)) b)
        (else (list (quote **) b e)))) 

(deriv (quote (* x 1)) (quote x))

(deriv (quote (** x 6)) (quote x))




